CPU 논리 프로세서 (하이퍼쓰레드)
	. 가상 코어
	. 하나의 코어에서 두 개의 쓰레드 사용

컴퓨터
. 직렬 컴퓨터
	- 하나의 CPU(또는 Core)만을 갖는 컴퓨터
	- 듀얼코어가 대중화 되기 이전의 대부분의 컴퓨터
	- 현재 멸종

. 병렬 컴퓨터
	- 여러 개의 CPU(또는 Core)가 명령들을 실행하는 컴퓨터
	- 직렬 컴퓨터의 속도 제한을 극복하기 위해 제작

. 병렬 컴퓨터의 사용 목적
	- 여러 개의 작업을 보다 빨리 실행하기 위해서
	  . 여러 대의 컴퓨터를 사용해도 됨 -> 더 싸다
	- 하나의 작업을 보다 빨리 실행하기 위해서

. 병렬 프로그램
	- 기존의 프로그램을 병렬 컴퓨터에서 실행했을 경우 속도 증가는 0%
	- 동시에 여러 개의 명령 흐름이 실행되는 것을 가정하고 다시
	프로그래밍 해야 한다. -> 병렬 프로그래밍

. 병렬 프로그램의 특징
	- 실행된 프로세스의 내부 여러 곳이 동시에 실행됨
	- 병렬로 실행되는 객체(Context로 불림) 사이의 협업이 필수
	- 크게 공유메모리(Shared Memory) 모델과 메시지 패싱(Message Passing) 모델이 있음
	- 우리가 다루는 것은 공유 메모리 모델

. 병렬 프로그램 요구사항 : 정확성과 성능
	- 여러 흐름(Context)에서 동시 다발적으로 호출해도 문제 없이 실행되는
	알고리즘이 필요.
	  . 오류가 발생하면 모든 것이 의미 없음
	- Context의 증가에 따른 성능 향상이 높아야 한다.
	  . 기존의 직렬 프로그램보다 느려질 수 있다.


멀티쓰레드 프로그래밍
	- 현재 운영체제에서 병렬 프로그래밍의 (유일한) 구현 수단
	- 하나의 프로세스 안에서 여러 개의 쓰레드를 실행 시켜 병렬성을 얻는 프로그래밍 방법
	- Windows, Linux, Android, iOS에서 기본으로 제공하는 유일한 병렬 프로그래밍 API
	  . HW와 운영체제가 직접 지원하는 것은 이것 뿐
	  . 다른 API로는 GPGPU가 있음.

. 프로세스
	- 운영체제는 사용자의 프로그램을 프로세스 단위로 관리한다.
	- 실행파일의 실행 -> 운영체제가 파일 내용을 메모리에 복사 후 시작 주소로 점프하는 것.
	  . 읽어 들일 때 여러 가지 초기화가 필요하다.
	- 시분할 운영체제는 여러 프로세스를 고속으로 번갈아 가면서 실행한다.
	  . 실행중인 프로세스의 상태를 강제로 준비(Ready)로 변경 가능
	- 프로세스의 메모리 구조는 다음과 같다
	  . Code : 실행될 명령어가 들어가는 구역
	  . Data : 전역변수가 들어가는 구역
	  . Stack : 지역변수와 함수 리턴 주소가 들어가는 구역
	  . Heap : malloc이나 new로 할당 받은 메모리가 들어가는 구역
	  . PCB : Process Control Block

. 프로세스와 쓰레드
	- 프로세스는 초기에 하나의 시작 쓰레드를 가짐
	- 쓰레드는 다른 쓰레드를 만들 수 있다.
	- 쓰레드 생성은 프로그래머가 지시한다.
	- 모든 쓰레드는 자신 고유의 Stack을 가지고 있고, Data와 Code를 공유한다.
	- 쓰레드는 CPU에서 하드웨어적으로 관리된다. (x86)

. 프로세스에 비한 쓰레드의 장점
	- 생성 Overhead가 적다
	- Context Switch Overhead가 적다.
	  . Virtual memory (TLB 교체 오버헤드)
	- 쓰레드간의 통신이 간단하다.
. 쓰레드의 단점
	- 하나의 쓰레드에서 발생한 문제가 전체 프로세스를 멈추게 한다.
	- 디버깅이 어렵다.