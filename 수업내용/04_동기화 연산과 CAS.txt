Wait Free 자료구조를 어떻게 만드는가
- 이 알고리즘을 Wait-Free 알고리즘으로 변환 할 수 있는가? (가능한가?)

일단 atomic memory부터 만들어 보자

질문 1
- 실제 메모리로 atomic memory를 제작할 수 있는 알고리즘이 존재하는가?
- wait-free를 유지하면서
-> 답 : 존재한다.

질문 2
- 기존의 싱글쓰레드 자료구조도 atomic memory를 사용해서 
  멀티쓰레드 자료구조로 변환하는 것이 가능한가?
- wait-free를 유지하면서
-> 답 : 불가능하다

질문 3
- 일반적인 자료구조를 멀티쓰레드 자료구조로 변환하려면 
  atomic memory 말고 무엇이 더 필요한가?
- wait-free를 유지하면서
-> 답 : CompareAndSet() 연산이면 충분하다.

동기화 연산
- 메모리에 대한 연산 : 읽기, 쓰기처럼 한 word에 대한 연산이다.
- 쓰레드끼리의 동기화는 동기화 연산을 통해서 이루어 진다.
- 읽기, 쓰기도 동기화 연산이다.
- 읽기, 쓰기 말고도 여러가지 연산이 존재한다.
	. ex) sum += 2

Compare And Set
- 동기화 연산의 일종
- bool 메모리.
- bool CompareAndSet(expected, update);
	. 메모리의 값이 expected면 update로 바꾸고 true 리턴
	. 메모리의 값이 expected가 아니면 false 리턴
	. 이 동작이 원자적으로 실행


논 블로킹 프로그램을 해야 한다.
이를 직접 구현하려면 CAS를 사용해야 한다.

정리
- 성능 향상을 위해 멀티쓰레드 프로그래밍을 해야 한다.
	. Data Race가 발생한다.
- Data Race를 최소화 해야 한다.
	. Data Race는 모든 오동작의 근원
- 어쩔 수 없이 남은 Data Race를 Lock 없이 해결해야 한다.
	. Data Race를 모두 없앨 수 없다.
	. Lock으로 해결하는 것은 성능 페널티가 크다.
- Data Race는 공유 객체 때문에 발생한다.
	. int, float, struct, class, container
- Non-Blocking 멀티쓰레드 객체가 필요하다.
- CAS를 사용하면 모든 일반 자료구조를 Multithread Lock-Free 자료구조로 변환할 수 있다.
- 효율적인 변환은 상당한 프로그래밍 노력을 필요로 한다.

atomic_compare_exchange_strong(addr, &expected, new_val);
- expected의 값이 바뀐다.
- atomic_compare_exchange_weak
	. expected의 값이 바뀌지 않기도 한다.
	. 사용하지 않을 것
	. ARM, x86 CPU에 따라 동작 방식이 다르다.

CAS
- mutex를 구현하기 위해 고안됨.
- CAS를 이용한 스핀락이 mutex보다 느린 이유
	. convoying 때문.
	. lock을 얻은 쓰레드가 context switch 당해 작업을 중단한다.
	. this_thread::yield()를 통해 개선 가능

- 빠르고 정확한 병렬 프로그램을 작성하는 것은 어렵다
	. 포기하라
- 포기하는 것이 불가능하면 주의해서 프로그래밍 하라
	. atomic 변수나 mfence의 도움 필요
- 쓰레드 간의 동기화를 위한 자료구조가 필요하다
	. Non-Blocking 자료구조가 필수이다.
	. Non-Blocking 자료구조에는 CAS가 필수이다.