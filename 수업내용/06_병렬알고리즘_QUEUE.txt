풀(POOL)
- 리스트는 Set 객체
- Queue와 Stack은 Pool 객체
- Pool 객체
	. 같은 아이템의 복수 존재를 허용
	. Contains() 메소드를 항상 제공하지 않는다.
	. Get()과 Set() 메소드를 제공한다.
	. 보통 생산자-소비자 문제의 버퍼로 사용된다.

풀의 종류
- 길이제한
	. 있다 : 제한 큐
	  - 구현하기 쉽다.
	  - 생산자와 소비자의 간격을 제한한다.
	. 없다 : 무제한 큐
- 메소드의 성질
	. 완전(total) : 특정 조건을 기다릴 필요가 없을 때
	  - 비어있는 풀에서 get할 때 실패 코드를 반환
	. 부분적(partial) : 특정 조건의 만족을 기다릴 때
	  - 비어있는 풀에서 get할 때 다른 누군가가 set할 때 까지 기다림
	. 동기적(synchronous)
	  - 다른 쓰레드의 메소드 호출의 중첩을 필요로 할 때

무제한 무잠금 큐
- Lock Free Enqueue의 기본 동작
	. tail이 가리키는 node에 CAS로 새 노드를 추가
	. 실패하면 재시도
	. 성공하면 tail을 이동

- 직관적으로 구현하면
void enq(int x) {
	Node *e = new Node(x);
	while (true) {
		if (CAS(&tail->next, NULL, &e)) {
			tail = e;
			return;
- 무얼 하고 싶은거냐, tail의 next가 null인지 확인해서(다른 쓰레드가 건들지 않았는지 확인해서)
- 확인되었으면 e로 갈아낀다. 이렇게 하면 끝나는거냐? 아니다. 지금 tail은 과거의 tail이기 때문에
- tail을 e로 바꿔줘야 한다.
- 정리하면 tail의 next가 여전히 null이라면, tail에 e를 끼워넣는다.
- 놀랍게도 Blocking이다.
- tail = e; 를 하기 직전에 context switching이 걸리면 모든 쓰레드가 대기하게 된다.
- 해결책
	. tail의 전진이 모든 쓰레드에서 가능하게 한다.

- 1차 수정
void enq(int x) {
	Node *e = new Node(x);
	while (true) {
		if (CAS(&(tail->next), NULL, &e)) {
			tail = e;
			return;
		 }
		if (nullptr != tail->next) tail = tail->next;
	 }
}
- 정리하면 CAS가 실패했을 때 tail의 next가 nullptr이 아니면, 
  tail을 tail의 next로 바꾼다.
- 이는 다른 쓰레드의 변경을 덮어 쓸 수 있다는 점에서 위험하다.

- 해결 : CAS 사용
	. tail값을 지역변수 last에 저장해서 비교
	. next값도 저장 필요

void enq(int x) {
	Node *e = new Node(x);
	while (true) {
		Node *last = tail;
		Node *next = last->next;
		if (last != tail) continue;
		if (nullptr == next) {
			if (CAS(&(last->next), nullptr, e)) {
			CAS(&tail, last, e);
			return;
			}
		} else CAS(&tail, last, next);
} }
- 정리하면 지역변수 last에 tail을 일단 저장해 두고, 여기 next에 CAS로 새 노드를 갈아낀다.
- 이게 성공했다면, tail의 전진을 시도한다. 어떻게? tail이 여전히 last라면 새 노드를 끼운다.
- 즉 tail과 tail->next가 둘 다 새 노드를 가리키고 있는 상태가 이상적이다?
- 실패했다면 tail이 여전히 last라면 next를 끼우는 것을 시도한다.
- 마지막 tail이 tail의 next를 가리키도록 하는 작업을, 모든 쓰레드에서 가능하게 하는 것이다.


Dequeue
- 비어 있는지 검사한다.
- Head를 전진시키고 끝낸다.
int deq(int x) {
	while (true) {
		Node *first = head;
		if (first->next == nullptr) EMPTY_ERROR();
		if (!CAS(&head, first, first->next))
			continue;
		int value = first->next->item;
		delete first;
		return value;
	}
}
- 다른 쓰레드에서 first->next를 delete시키면 무슨 일이 벌어질지 알 수 없다.
- value값이 queue에 원래 있었던 값이라는 보장이 없다.

- next의 사용
int deq(int x) {
	while (true) {
		Node *first = head;
		Node *next = first->next;
		if (first != head) continue;
		if (next == nullptr) EMPTY_ERROR();
		int value = next->item;
		if (false == CAS(&head, first, next))
			continue;
		delete first;
		return value;
	}
}

- 왜 문제인가
	. Inqueue가 문제이다.
	. Inqueue를 하기 위해 큐의 정의를 느슨하게 풀었다. 이것이 문제를 유발한다.
	. Tail과 Head가 만나는 경우?
	. Tail이 Enq하는 도중에 Deq가 일어나 Tail이 삭제된 보초노드를 가리키는 순간이 생긴다.
	. Enq가 전진시킬때까지 기다리면 Blocking이니까 내가 전진시키자.

- head, tail에 계속 CAS를 하면서 업데이트를 한다.
	. CAS가 head, tail에 반복적으로 실행되며 병행성이 떨어진다.
	. 큐는 멀티쓰레드 성능향상이 없는 저주받은 자료구조? -> 아니다. 그러나 쉽지 않다

- enq에서의 tail의 전진을 보조해 준다.
int deq(int x) {
	while (true) {
		Node *first = head;
		Node *last = tail;
		Node *next = first->next;
		if (first != head) continue;
		if (nullptr == next) EMPTY_ERROR();
		if (first == last) {
			CAS(&tail, last, next);
			continue;
		}
		int value = next->item;
		if (false == CAS(&head, first, next)) continue;
		delete first;
		return value;
	}
}


- delete할 때 죽는 이유?
	. ABA 문제
	. CAS 사용 시 다른 쓰레드에서 그 주소를 재사용했을 가능성이 있다.

ABA
- 논 블로킹 프로그램에서 CAS를 사용하기 때문에 발생하는 문제.
	. A라는 쓰레드가 Deq를 하고 싶다.
	. A라는 쓰레드가 CAS를 하려 하는데, B라는 쓰레드도 CAS를 시도한다.
	. B가 선택받아 변경에 성공했는데, 동시에 A의 CAS가 삭제된 포인터를 참조한다. 

해결 방법
- 포인터를 포인터 + 스탬프로 확장하고 포인터값을 변경할 때마다 스태프 값을 변경시킨다.
	. 64비트인 경우 몇 개의 비트를 스탬프에 할당
	. 32비트인 경우 복잡
- LL, SC 명령의 사용 (Load Linked, Store Conditional) (ARM, Alpha, PowerPC)
	. 값을 검사하는 것이 아니라 변경 여부를 검사
	. LL, SC 구조는 CAS보다 우월하다.
	. CAS는 값만 같으면 성공하지만, LL, SC는 다른 쓰레드가 건드리기만 해도 실패한다.
	  - 그러나 LL, SC는 wait-free가 불가능하다.
- Reference Counter를 사용한다.
	. 다행히 합성포인터가 아니다.
	. atomic_shared_ptr은 lock-free가 아니다.
	. Java는 이러한 문제가 없다.
- 별도의 메모리 관리 기법을 사용한다.
	. EBR (Epoch Based Memory Reclamation)
	. Hazard Pointer