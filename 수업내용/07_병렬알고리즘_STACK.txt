Stack
- 후입선출 구조
- Push(), Pop() 메서드를 제공
- 성능은 큐보다 좋다. (캐시 친화적)

무제한 성긴 동기화 스택
- 연결 리스트로 구성되고 top 필드가 첫 노드를 가리킨다.
- 만약 스택이 비어있을 경우는 nullptr (보초 노드를 넣을 필요가 없다)
- -1을 스택에 추가하는 것은 고려하지 않는다.
- empty일 경우 pop()은 -2를 리턴한다.

무제한 무잠금 스택
- CAS를 이용하여 구현한다.
- Top의 변환을 CAS를 사용하여 non-blocking으로 구현한다.
- ABA 문제가 있으므로 delete를 하지 않는다.

- 메소드 호출은 스택의 top에 대해 성공한 CAS호출의 순서로 하나씩 진행되므로
  순차병목현상이 나타날 수 있다.
- new와 delete를 사용하면 ABA 문제가 생긴다.
	. Queue보다 문제가 생길 확률이 크다.

CAS 동기화의 문제
- 경쟁이 심할 경우 CAS 실패시 계속 재시도하는 것은 전체 시스템의 악영향을 줌
	. Thread가 많아질 수록 경쟁이 심해짐
	. 경쟁이 심할 경우 CAS가 실패할 확률이 높음
	  - 실패할 경우 성공할 때 까지 반복
	. CAS를 실행할 경우 같은 CPU의 모든 Core의 메모리 접근이 중단됨
	  - thread가 많아질 수록 잦은 메모리 접근 중단

BackOff
- 경쟁이 심할 경우 경쟁을 줄이자.
	. CAS의 실패는 경쟁이 심함을 뜻함.
	. CAS가 실패했을 경우 적절한 기간 동안 실행을 멈추었다가 재개하자.
	. CAS의 실패 확률이 낮아짐 -> 메모리 접근 중단 감소
- 적절한 기간
	. 처음에는 짧게
	. 계속 실패하면 점점 길게
	. 첫 번 시도에 성공하면 짧게
	. thread마다 기간을 다르게 해야 한다.