1
A. 프로그램의 요청에 의해 이뤄지는게 맞다
B. X
C. X. 부하가 작다.
D. 맞다. 그렇지 않을 경우 싱글 스레드 프로그래밍이 잘못된 것
E. 문제 없다.
F. X. 모든 스레드에서 공평하게 접근할 수 잇다.

2. volatile은 기게어 생성할 때 생략하지 않고 순서를 지키는 선에서 끝나지만 atomic은 CPU 레벨에서 atomic하게 수행하는 것까지 보장한다.

3. 
1) volatile이 없으므로 릴리즈모드에서 최적화가 진행되어 성능측정이 의미가 없어진다.
2) 

4. 
A. O
b. x
c. o
d. o
e. x
f. x

6. 다른 스레드의 실행을 가능하게 해주는 역할을 가지고 잇는 스레드가 컨텍스트 스위치를 당하면서 스케줄에서 제외되어 다른 스레드들이 일을 하지 못하고 그 스레드의 재실행을 기다리는 현상

7
a. 성긴 동기화; 모든 메소드를 하나의 뮤텍스를 사용해서 아토믹하게 실행하게 하는 방식
B. 세밀한 동기화; 뮤텍스를 노드마다 설치해서 서로 다른 위치에서 
C. 세밀한 동기화의 검색 오버헤드를 줄이기 위해 검색 시 락 없이 하는 방법. 정확한 동작을 위해 검색이 종료된 위치에서 락을 건 후 유효성 검사를 한다.
D. 유효성 검사의 부하를 줄이기 위해 노드마다 마킹을 추가하고 마킹값의 확인 만으로 유효성 검사를 긑낸다.

8
A. O
B. X. 로컬 락을 사용한다.
C. O. 나 혼자만 접근하기 대문에 락 걸 필요 없음
D. X
E. X

9. 구현이 가능한다면 아토믹 메로리로 합의 수가 2인 합의객체의 작성이 가능해진다. 이것은 아토멕 메모리의 합의 수가 1이라는 가정과 모순이다 다라서 마토믹 메모리로 큐를 구현할 수 없다.

10. 
A. 반대로 할 경우 리스트에서 제거되엇지만 removed가 false인 노드가 존재하고 유효성 검사가 오동작한다.

B. 검색에서 참조하는 노드들이 delete되어 재사용되는 경우 전혀 엉둥한 값을 가질 수 있게되고 검색이 오동작 할 수 있다.

11
A. 